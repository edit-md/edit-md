services:
    # Reverse proxy for the frontend and other services
    nginx-ssl:
        build:
            context: ./dev/nginx/
        ports:
            - "80:80"
            - "443:443"
        environment:
            - ACCOUNT_SERVICE=http://account-service:8080
            - FRONTEND_SERVICE=http://host.docker.internal:8085
            - FILE_SERVICE=http://localhost
            - DOCUMENT_SERVICE=http://document-service:8080
        networks:
            - nginx-net
        depends_on:
            - account-service
            - document-service

    # Account service
    accounts-sessions-db:
        image: bitnami/keydb:6.3.4
        environment:
            - KEYDB_DATABASE=state
            - KEYDB_PASSWORD=${SESSION_REDIS_PASSWORD}
        healthcheck:
            test: [ "CMD", "keydb-cli", "-a", "${SESSION_REDIS_PASSWORD}", "--raw", "incr", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - account-service-net

    accounts-db:
        image: postgres:17.2
        restart: always
        environment:
            - POSTGRES_DB=${ACCOUNT_DB_NAME}
            - POSTGRES_USER=${ACCOUNT_DB_USER}
            - POSTGRES_PASSWORD=${ACCOUNT_DB_PASSWORD}
        volumes:
            - accounts-db:/var/lib/postgresql/data
            - ./dev/db/accounts/init:/docker-entrypoint-initdb.d
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U admin" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - account-service-net

    account-service:
        build:
            context: ./services/account-service
            target: dev
        restart: always
        environment:
            - EDITMD_API_KEY=${EDITMD_API_KEY}
            - EDITMD_FRONTEND_HOST=${EDITMD_FRONTEND_HOST}
            
            - SPRING_DATASOURCE_URL=jdbc:postgresql://accounts-db:5432/${ACCOUNT_DB_NAME}
            - SPRING_DATASOURCE_USERNAME=${ACCOUNT_DB_USER}
            - SPRING_DATASOURCE_PASSWORD=${ACCOUNT_DB_PASSWORD}

            - REDIS_HOST=accounts-sessions-db
            - REDIS_PORT=6379
            - REDIS_PASSWORD=${SESSION_REDIS_PASSWORD}

            - GITHUB_OAUTH_CLIENT_ID=${GITHUB_OAUTH_CLIENT_ID}
            - GITHUB_OAUTH_CLIENT_SECRET=${GITHUB_OAUTH_CLIENT_SECRET}
        depends_on:
            - accounts-db
            - accounts-sessions-db
        networks:
            - nginx-net
            - account-service-net
        develop:
            watch:
                - path: ./services/account-service/src  # Watch for changes in the source folder
                  action: sync  # Sync the changes
                  target: /app/src  # Sync to container's source directory
                - path: ./services/account-service/pom.xml  # Watch for changes in pom.xml
                  action: rebuild

    # Document service
    document-service:
        build:
            context: ./services/document-service
            target: dev
        restart: always
        environment:
            - EDITMD_API_KEY=${EDITMD_API_KEY}
            - EDITMD_FRONTEND_HOST=${EDITMD_FRONTEND_HOST}

            - SPRING_DATASOURCE_URL=jdbc:postgresql://documents-db:5432/${DOCUMENT_DB_NAME}
            - SPRING_DATASOURCE_USERNAME=${DOCUMENT_DB_USER}
            - SPRING_DATASOURCE_PASSWORD=${DOCUMENT_DB_PASSWORD}
        depends_on:
            - account-service
            - documents-db
        networks:
            - nginx-net
            - document-service-net
        develop:
            watch:
                - path: ./services/document-service/src  # Watch for changes in the source folder
                  action: sync  # Sync the changes
                  target: /app/src  # Sync to container's source directory
                - path: ./services/document-service/pom.xml  # Watch for changes in pom.xml
                  action: rebuild

    documents-db:
        image: postgres:17.2
        restart: always
        environment:
            - POSTGRES_DB=${DOCUMENT_DB_NAME}
            - POSTGRES_USER=${DOCUMENT_DB_USER}
            - POSTGRES_PASSWORD=${DOCUMENT_DB_PASSWORD}
        volumes:
            - document-db:/var/lib/postgresql/data
            - ./dev/db/documents/init:/docker-entrypoint-initdb.d
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U admin" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - document-service-net

volumes:
    accounts-db:
    document-db:

networks:
    nginx-net:
        driver: bridge
    account-service-net:
        driver: bridge
    document-service-net:
        driver: bridge